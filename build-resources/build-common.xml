<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="build-common" default="default">
    <import file="../dependencies.xml"/>

    <!-- March of the Pink Elephants                      -->
    <!-- ant based full build system for java projects    -->
    <!-- version: 0.3                                     -->
    <!-- licence: MPL1.1                                  -->
    <!-- home: http://stroy.wikidot.com/motpe             -->
    <!-- contact: openCage@gmail.com                      -->

    <target name="default" depends="everything"/>

    <!-- ====== properties ========== -->
    <!-- ====== properties ========== -->
    <!-- ====== properties ========== -->


    <!-- ====== overrideable properties ========== -->

    <property name="version" value="0.0.1"/>
    <property name="creator" value="Stephan Pfab"/>
    <property name="buildnumber" value="42"/>
    <property name="app.name" value="${ant.project.name}"/>
    <property name="app.main" value=""/>
    <property name="app.signature" value="${ant.project.name}"/>
    <property name="app.bundleid" value="elph"/>
    <property name="app.icon.osx" value=""/>
    <property name="app.icon.small.png" value=""/>
    <property name="app.icon.small.ico" value="-"/>
    <property name="app.helpbook" value=""/>
    <property name="groupId" value="elephants"/>
    <property name="elph.java.version" value="6" />
    <property name="app.description.short" value="" />
    <property name="app.description.full" value="" />
    <property name="author.name" value="anymous" />
    <property name="author.contact" value="404" />
    <property name="readme" value="-" />
    <property name="elephants.licence" value = "MPL 1.1" />
    <property name="elephants.x" value="----" />


    <!-- ====== local properties ========== -->

    <property name="classes"         value="${dependencies.basedir}/build/classes/${ant.project.name}"/>
    <property name="objc-classes"    value="${dependencies.basedir}/build/objc-classes/${ant.project.name}"/>
    <property name="libs"            value="${dependencies.basedir}/build/libs"/>
    <property name="objc-libs"       value="${dependencies.basedir}/build/objc-libs"/>
    <property name="collect-jars"    value="${dependencies.basedir}/build/collect-jars/${ant.project.name}"/>
    <property name="module"          value="${dependencies.basedir}/modules/${ant.project.name}"/>
    <property name="resources"       value="${dependencies.basedir}/build/resources/${ant.project.name}"/>
    <property name="deploy"          value="${dependencies.basedir}/build/deploy/${ant.project.name}"/>
    <property name="src"             value="${module}/src"/>
    <property name="helpbooksrc"     value="${module}/${app.helpbook}"/>

    <condition property="isOSX">
        <and>
            <os family="mac"/>
            <os family="unix"/>
        </and>
    </condition>
    <condition property="isLinux">
        <and>
            <not>
                <os family="mac"/>
            </not>
            <os family="unix"/>
        </and>
    </condition>
    <condition property="isWindows">
        <and>
            <os family="winnt"/>
        </and>
    </condition>
    <condition property="isUnix">
        <and>
            <os family="unix"/>
        </and>
    </condition>
    <condition property="osx.icon" value="${src}/${app.icon.osx}" else="${dependencies.basedir}/build-resources/elephant.icns">
        <and>
            <not><equals arg1="${app.icon.osx}" arg2="" /></not>
            <available file="${src}/${app.icon.osx}"/>
        </and>
    </condition>
    
    <condition property="osx.background-png" value="fooo" else="${dependencies.basedir}/build-resources/elephant.png">
        <available file="foooo"/>
    </condition>


    <!-- ================================================================================= -->
    <!-- =========================== extra tasks ========================================= -->
    <!-- ================================================================================= -->

    <!-- if-task and others -->
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${dependencies.basedir}/external/build/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>


    <!-- build osx apps -->
    <taskdef name="jarbundler"
             classpath="${dependencies.basedir}/external/build/jarbundler-2.0.0.jar"
             classname="net.sourceforge.jarbundler.JarBundler"/>


    <!-- debian package builder task -->
    <taskdef name="deb"
             classpath="${dependencies.basedir}/external/build/ant-deb-0.0.1.jar"
             classname="com.googlecode.ant_deb_task.Deb"/>
    <taskdef name="desktopentry"
             classpath="${dependencies.basedir}/external/build/ant-deb-0.0.1.jar"
             classname="com.googlecode.ant_deb_task.DesktopEntry"/>



    <!-- windows exe builder task -->
    <taskdef name="launch4j"
             classname="net.sf.launch4j.ant.Launch4jTask"
             classpath="${dependencies.basedir}/external/build/launch4j.jar:${dependencies.basedir}/external/production/xstream-1.3.1.jar" />

    <!-- ================================================================================= -->
    <!-- =============================== targets ========================================= -->
    <!-- ================================================================================= -->

    <!-- clean all artifacts created in a build -->
    <target name="clean">
        <delete dir="${dependencies.basedir}/build"/>
    </target>

    <target  name="help">
        <echo message="March o the Elephants build file for ${app.name}" />
        <echo message="ant                        :  builds ${app.name} with all dependencies" />
        <echo message="ant everything             :  (default) builds ${app.name} with all dependencies" />
        <echo message="ant clean                  :  removed all build artifacts" />
        <echo message="ant help                   :  print this help" />
        <echo message="ant local.xxx              :  build task for the local project only, i.e. depended projects are assumed to be build already" />
        <echo message="ant local.compile          :  compile all classes" />
        <echo message="ant local.create-manifest  :  creates a manifest with classpath to all dependent jars" />
        <echo message="ant local.create-jar       :  creates a jar file with manifest" />
        <echo message="ant local.osx-appp         :  builds a osx application (on OSX only)" />
        <echo message="ant local.xplatform-app    :  builds a application based on shell/bat script to be used on OSX/win/linux" />
        <echo message="ant local.dmg              :  builds dmg file for OSX (on OSX only)" />
        <echo message="ant local.debian-pkg       :  builds debian package" />
        <echo message="ant local.exe              :  builds a exe for windows (on windows only)" />

    </target>

    <!-- internal: prepare directories          -->
    <target name="local.prepare">
        <tstamp/>
        <mkdir dir="${classes}"/>
        <mkdir dir="${objc-classes}"/>
        <mkdir dir="${libs}"/>
        <mkdir dir="${objc-libs}"/>
        <mkdir dir="${collect-jars}"/>
        <mkdir dir="${resources}"/>
        <mkdir dir="${deploy}"/>
        <mkdir dir="${deploy}/linux"/>
        <mkdir dir="${deploy}/unix"/>
        <mkdir dir="${deploy}/xplatform"/>
        <mkdir dir="${deploy}/windows"/>
        <mkdir dir="${deploy}/osx"/>
        <mkdir dir="${deploy}/debian"/>
    </target>


    <fileset id="internalsSet" dir="${libs}">
        <include name="*.jar"/>
    </fileset>
    <path id="jars">
        <fileset refid="internalsSet"/>
    </path>

    <!-- compile sources and copy pictures and xmsl -->
    <target name="local.compile" depends="local.prepare">
        <javac srcdir="${src}" destdir="${classes}">
            <classpath refid="jars"/>
        </javac>

        <copy todir="${classes}" flatten="no">
            <fileset dir="${src}" includes="**/*.xml"/>
            <fileset dir="${src}" includes="**/*.properties"/>
            <fileset dir="${src}" includes="**/*.png"/>
            <fileset dir="${src}" includes="**/*.txt"/>
        </copy>

        <if>
            <and>
                <isset property="objective-c-helpviewer"/>
                <isset property="isOSX"/>
            </and>
            <then>
                <!-- Create a JNI library for launching the Help Viewer -->
                <exec executable="cc">
                    <arg line="-c"/>
                    <arg line="-I/System/Library/Frameworks/JavaVM.framework/Headers"/>
                    <arg line="-o ${objc-classes}/HelpBookJNI.o"/>
                    <arg value="${module}/objc-src/HelpBookJNI.m"/>
                </exec>

                <exec executable="cc">
                    <arg line="-dynamiclib"/>
                    <arg line="-framework JavaVM"/>
                    <arg line="-framework Cocoa"/>
                    <arg line="-o ${objc-libs}/libHelpBookJNI.jnilib"/>
                    <arg value="${objc-classes}/HelpBookJNI.o"/>
                </exec>

                <delete file="${objc-classes}/HelpBookJNI.o" quiet="true"/>
            </then>
        </if>


    </target>

    <!-- construct the manifest                                                              -->
    <!-- classpath is everything already in libs, i.e. all libs the current build depends on -->
    <!-- which are specified in dependencies.xml                                             -->
    <target name="local.create-manifest" depends="local.prepare">
        <pathconvert property="jars-var" pathsep=" " refid="jars">
            <map from="${libs}/" to=""/>
        </pathconvert>

        <!-- dbg -->
        <echo message="jars-vars = ${jars-var}"/>

        <manifest file="${resources}/manifest.mf" mode="replace">
            <attribute name="Built-By" value="${user.name}"/>
            <attribute name="Created-By" value="${creator}"/>
            <attribute name="Class-Path" value="${jars-var}"/>
        </manifest>
        <if>
            <isset property="isApp"/>
            <then>
                <manifest file="${resources}/manifest.mf" mode="update">
                    <attribute name="Main-Class" value="${app.main}"/>
                </manifest>
            </then>
        </if>
    </target>


    <!--      jar      -->
    <target name="local.create-jar" depends="local.compile,local.create-manifest">
        <echo message="${ant.project.name} - build-common.collect-jars"/>
        <jar jarfile="${libs}/${groupId}-${ant.project.name}-${version}.jar"
             manifest="${resources}/manifest.mf">
            <fileset dir="${classes}" excludes="**/*test*"/>
        </jar>
    </target>

    <!-- collect all classpath relevant jars for the current module in an extra dir-->
    <target name="local.collect.jars" depends="local.create-jar">
        <copy todir="${collect-jars}">
            <fileset refid="internalsSet"/>
        </copy>
    </target>


    <!-- copy help html pages together                                         -->
    <!-- based on osx help layout                                              -->
    <!-- English is required other languages are optional and will use English -->
    <target name="local.helpsetup">
        <if>
            <and>
                <!--<isset property="isApp"/>-->
                <available file="${helpbooksrc}/English"/>
            </and>
            <then>
                <copy todir="${resources}/helpbook/English.lproj/HelpBook">
                    <fileset dir="${helpbooksrc}/English"/>
                    <fileset dir="${helpbooksrc}/common"/>
                </copy>
            </then>
            <else>
                <copy todir="${resources}/helpbook/English.lproj/HelpBook">
                    <fileset dir="${dependencies.basedir}/build-resources/English"/>
                    <fileset dir="${dependencies.basedir}/build-resources/common"/>
                </copy>
            </else>
        </if>
        <if>
            <available file="${helpbooksrc}/Japanese"/>
            <then>
                <copy todir="${resources}/helpbook/Japanese.lproj/HelpBook">
                    <fileset dir="${helpbooksrc}/Japanese"/>
                    <fileset dir="${helpbooksrc}/common"/>
                </copy>
            </then>
            <else>
                <copy todir="${resources}/helpbook/Japanese.lproj/HelpBook">
                    <fileset dir="${dependencies.basedir}/build-resources/English"/>
                    <fileset dir="${dependencies.basedir}/build-resources/common"/>
                </copy>
            </else>
        </if>
        <if>
            <available file="${helpbooksrc}/German"/>
            <then>
                <copy todir="${resources}/helpbook/German.lproj/HelpBook">
                    <fileset dir="${helpbooksrc}/German"/>
                    <fileset dir="${helpbooksrc}/common"/>
                </copy>
            </then>
            <else>
                <copy todir="${resources}/helpbook/German.lproj/HelpBook">
                    <fileset dir="${dependencies.basedir}/build-resources/English"/>
                    <fileset dir="${dependencies.basedir}/build-resources/common"/>
                </copy>
            </else>
        </if>
        <if>
            <available file="${helpbooksrc}/Spanish"/>
            <then>
                <copy todir="${resources}/helpbook/Spanish.lproj/HelpBook">
                    <fileset dir="${helpbooksrc}/German"/>
                    <fileset dir="${helpbooksrc}/common"/>
                </copy>
            </then>
            <else>
                <copy todir="${resources}/helpbook/Spanish.lproj/HelpBook">
                    <fileset dir="${dependencies.basedir}/build-resources/English"/>
                    <fileset dir="${dependencies.basedir}/build-resources/common"/>
                </copy>
            </else>
        </if>
    </target>

    <!-- build a osx app, app layout, plist, icon, help -->
    <target name="local.osx-app" depends="local.collect.jars,local.helpsetup"> <!-- ,jni"> -->
        <if>
            <and>
                <isset property="isOSX"/>
                <isset property="isApp"/>
            </and>
            <then>
                <!-- location changed to help with zipping, ant copy does not work for local.osx-apps -->
                <mkdir dir="${deploy}/osx/${app.name}"/>
                <jarbundler dir="${deploy}/osx/${app.name}"
                            verbose="true"
                            name="${app.name}"
                            shortname="${app.name}"
                            stubfile="${app.name}"
                            signature="${app.signature}"
                            mainclass="${app.main}"
                            jvmversion="1.6+"
                            version="${version}"
                            infostring="${app.name}, ${elephants.licence}"
                            build="${buildnumber}"
                            bundleid="${app.bundleid}"
                            icon="${osx.icon}"
                            helpbookfolder="HelpBook"
                            helpbookname="${app.name}"
                        >
                    <jarfileset refid="internalsSet"/>

                    <!-- Copy the HelpBook JNI library  -->
                    <!--<javafilelist dir="${objc-libs}" files="libHelpBookJNI.jnilib"/>-->

                    <javaproperty name="apple.laf.useScreenMenuBar" value="true"/>
                    <javaproperty name="com.apple.macos.useScreenMenuBar" value="true"/>

                    <helpbook  locale="English">
                        <fileset dir="${resources}/helpbook/English.lproj/HelpBook"/>
                    </helpbook>

                    <helpbook locale="German">
                        <fileset dir="${resources}/helpbook/German.lproj/HelpBook"/>
                    </helpbook>

                    <helpbook locale="Japanese">
                        <fileset dir="${resources}/helpbook/Japanese.lproj/HelpBook"/>
                    </helpbook>

                </jarbundler>

                <!--<copy todir="${deploy}/osx/${app.name}" >-->
                <!--<fileset dir="${deploy}/osx/" >-->
                <!--<exclude name="${app.name}"/>-->
                <!--</fileset>-->
                <!--</copy>-->
                <zip destfile="${deploy}/osx/${app.name}.app-${version}.zip"
                     basedir="${deploy}/osx/${app.name}"/>
            </then>
            <else>
                <echo message="not all properties set to build an osx.app"/>
            </else>
        </if>
    </target>

    <target  name="local.xplatform.prepare" depends="local.collect.jars,local.helpsetup">
        <if>
            <isset property="isApp"/>
            <then>
                <property name="lxp.to" value="${deploy}/${elephants.x}/${app.name}" />
                <mkdir dir="${lxp.to}/resources/java"/>
                <copy todir="${lxp.to}/resources/java">
                    <fileset refid="internalsSet"/>
                </copy>

                <!-- help files / osx layout  -->
                <if>
                    <available file="${resources}/helpbook"/>
                    <then>
                        <copy todir="${lxp.to}/resources">
                            <fileset dir="${resources}/helpbook"/>
                        </copy>
                    </then>
                </if>

                <!-- readme.txt  -->
                <if>
                    <available file="${src}/${readme}"/>
                    <then>
                        <copy todir="${lxp.to}" file="${src}/${readme}"/>
                    </then>
                </if>

                <!-- pad file -->
                <copy file="${dependencies.basedir}/build-resources/pad_file.xml" todir="${lxp.to}" />
                <replace  file="${lxp.to}/pad_file.xml" token="[groupId]" value="${groupId}" />
                <replace  file="${lxp.to}/pad_file.xml" token="[webpage]" value="http://stroy.wikidot.com" />
                <replace  file="${lxp.to}/pad_file.xml" token="[author.first]" value="Stephan" />
                <replace  file="${lxp.to}/pad_file.xml" token="[author.last]" value="Pfab" />
                <replace  file="${lxp.to}/pad_file.xml" token="[author.contact]" value="openCage@gmail.com" />
                <replace  file="${lxp.to}/pad_file.xml" token="[app.name]" value="${app.name}" />
                <replace  file="${lxp.to}/pad_file.xml" token="[version]" value="${version}" />
                <replace  file="${lxp.to}/pad_file.xml" token="[screenshot.url]" value="http://stroy.wikidot.com/local--files/screenshots/fausterize-0.6.png" />
                <replace  file="${lxp.to}/pad_file.xml" token="[icon.url]" value="http://stroy.wikidot.com/local--files/screenshots/faust-small.png" />



                <!-- unix shell script (sh) -->
                <echo message="java -jar resources/java/${groupId}-${ant.project.name}-${version}.jar"
                      file="${lxp.to}/${app.name}.sh"/>
                <chmod file="${lxp.to}/${app.name}.sh" perm="ugo+x"/>

                <!-- windows command script -->
                <echo message="java -jar resources/java/${groupId}-${ant.project.name}-${version}.jar"
                      file="${lxp.to}/${app.name}.cmd"/>

            </then>
        </if>

    </target>

    <!-- build a xplatform deliverable   -->
    <!-- i.e. jar files started by os-specific shell scripts-->
    <!-- layout inspired by osx app layout      -->
    <target name="local.xplatform-app"
            depends="local.collect.jars,local.helpsetup">
        <if>
            <isset property="isApp"/>
        <then>
            <antcall target="local.xplatform.prepare" >
                <param name="elephants.x" value="xplatform"/>
            </antcall>

            <!-- finalize pad file -->
            <replace  file="${deploy}/xplatform/${app.name}/pad_file.xml" token="[pad.url]" value="http://stroy.wikidot.com/local--files/download/${app.name}-xplatform-pad.xml" />
            <replace  file="${deploy}/xplatform/${app.name}/pad_file.xml" token="[download.url]" value="http://stroy.wikidot.com/local--files/download/${app.name}-${version}.zip" />
            <copy file="${deploy}/xplatform/${app.name}/pad_file.xml" tofile="${deploy}/xplatform/${app.name}-xplatform-pad_file.xml"/>

            <zip destfile="${deploy}/xplatform/${app.name}-${version}.zip" basedir="${deploy}/xplatform/${app.name}"/>
        </then>
        </if>
    </target>

    <!-- Create a local.dmg - This only works on MacOSX (requires hdiutil) -->
    <target name="local.dmg" depends="local.osx-app"
            description="Create a local.dmg package for MacOSX (only works on MacOSX)">

        <if>
            <and>
                <isset property="isApp"/>
                <isset property="isOSX"/>
            </and>
            <then>

                <!-- Set this property value to your application name    -->
                <!--<property name="app.name"-->
                <!--value="MY_APPLICATION_NAME"/>-->

                <!-- Set this property value to a directory where you can -->
                <!--     mount temporarily your images, for example /tmp  -->
                <property name="mountdir"
                          value="/tmp"/>

                <!-- Delete previously created local.dmg -->
                <!--<delete file="${app.name}.local.dmg}"-->
                <!--quiet="yes" failonerror="false"/>-->

                <property name="tmplocal.dmg" value="${deploy}/osx/${app.name}-tmp.local.dmg"/>

                <!-- Create a temporary Disk Image -->
                <exec executable="/usr/bin/hdiutil" os="Mac OS X" failonerror="true">
                    <arg value="create"/>
                    <arg value="-srcfolder"/>
                    <arg value="${deploy}/osx/${app.name}/${app.name}.app"/>
                    <arg value="-volname"/>
                    <arg value="${app.name}"/>
                    <arg value="-ov"/>
                    <arg value="${tmplocal.dmg}"/>
                    <arg value="-format"/>
                    <arg value="UDRW"/>
                </exec>

                <!-- Attach the temporary image -->
                <exec executable="/usr/bin/hdiutil" os="Mac OS X" failonerror="true">
                    <arg value="attach"/>
                    <arg value="${tmplocal.dmg}"/>
                    <arg value="-mountroot"/>
                    <arg value="${mountdir}/"/>
                </exec>

                <!-- Copy the background, the volume icon and DS_Store files -->
                <mkdir dir="${mountdir}/${app.name}/.background"/>
                <copy file="${osx.background-png}"
                      tofile="${mountdir}/${app.name}/.background/background.png"
                      overwrite="true"/>
                <copy file="${osx.icon}"
                      tofile="${mountdir}/${app.name}/.VolumeIcon.icns"
                      overwrite="true"/>
                <!--<copy file="DS_Store"-->
                <!--tofile="${mountdir}/${app.name}/.DS_Store"-->
                <!--overwrite="true"/>-->

                <!-- Indicate that we want a custom icon -->
                <exec executable="/Developer/Tools/SetFile" os="Mac OS X">
                    <arg value="-a"/>
                    <arg value="C"/>
                    <arg value="${mountdir}/${app.name}"/>
                </exec>

                <!-- Add a symbolic link to the Applications directory -->
                <symlink link="${mountdir}/${app.name}" resource="/Applications"/>

                <!-- Detach the temporary image -->
                <exec executable="/usr/bin/hdiutil" os="Mac OS X" failonerror="true">
                    <arg value="detach"/>
                    <arg value="${mountdir}/${app.name}"/>
                </exec>

                <!-- Compress it to a new image -->
                <exec executable="/usr/bin/hdiutil" os="Mac OS X" failonerror="true">
                    <arg value="convert"/>
                    <arg value="${tmplocal.dmg}"/>
                    <arg value="-format"/>
                    <arg value="UDZO"/>
                    <arg value="-o"/>
                    <arg value="${deploy}/osx/${app.name}.local.dmg"/>
                </exec>

                <!-- Delete the temporary image -->
                <delete file="${app.name}-tmp.local.dmg"
                        quiet="yes" failonerror="false"/>
            </then>
        </if>
    </target>

    <!-- build a linux desctop description file -->
    <target name="local.linux-dektop-description" depends="local.prepare">
        <if>
            <isset property="isApp"/>
            <then>
                <desktopentry
                        toFile="${deploy}/debian/${app.name}.desktop"
                        name="${app.name}"
                        comment="fooo comment"
                        exec="java -jar /usr/share/${app.name}/resources/java/${groupId}-${ant.project.name}-${version}.jar"
                        path="/usr/share/${app.name}/"
                        icon="/usr/share/${app.name}/${app.name}.png"
                        categories="Utility;Java"
                        />
            </then>
        </if>
    </target>

    <!-- build a linux debian package -->
    <target name="local.debian-pkg" depends="local.linux-dektop-description,local.create-jar" >
        <if>
            <isset property="isApp"/>
            <then>

                <antcall target="local.xplatform.prepare" >
                    <param name="elephants.x" value="debian"/>
                </antcall>

                <if>
                    <available file="${src}/${app.icon.small.png}"/>
                    <then>
                        <copy tofile= "${deploy}/debian/${app.name}/${app.name}.png" file="${src}/${app.icon.small.png}" failonerror="true" overwrite="true"/>
                    </then>
                </if>

                <!-- finalize pad file -->
                <replace  file="${deploy}/debian/${app.name}/pad_file.xml" token="[pad.url]" value="http://stroy.wikidot.com/local--files/download/${app.name}-debian-pad.xml" />
                <replace  file="${deploy}/debian/${app.name}/pad_file.xml" token="[download.url]" value="http://stroy.wikidot.com/local--files/download/${app.name}-${version}.deb" />
                <copy file="${deploy}/debian/${app.name}/pad_file.xml" tofile="${deploy}/debian/${app.name}-debian-pad_file.xml"/>

                <condition property="deb.depends" value="openjdk-6-jre | sun-java6-jre" else="">
                    <equals arg1="${elph.java.version}" arg2="6"/>
                </condition>

                <deb
                        todir  ="${deploy}/debian"
                        package="${app.name}"
                        section="utils"
                        depends="${elph.java.version}"
                        >
                    <version upstream="${version}"/>
                    <maintainer email="${author.contact}"/>
                    <description synopsis="${app.description.short}">
                        ${app.description.full}
                    </description>

                    <tarfileset dir="${deploy}/debian/${app.name}" prefix="usr/share/${app.name}"/>
                    <tarfileset file="${deploy}/debian/${app.name}.desktop" prefix="usr/share/applications"/>
                </deb>
            </then>
        </if>
    </target>

    <target name="local.exe" depends="local.collect.jars">

        <if>
            <and>
                <isset property="isApp"/>
                <isset property="isWindows"/>
            </and>
            <then>
                <antcall target="local.xplatform.prepare" >
                    <param name="elephants.x" value="windows"/>
                </antcall>

                <if>
                    <available file="${src}/${app.icon.small.png}"/>
                    <then>
                        <copy tofile= "${deploy}/windows/${app.name}/${app.name}.png" file="${src}/${app.icon.small.png}" failonerror="true" overwrite="true"/>
                    </then>
                </if>


                <!-- fill the launch4j config template  -->

                <!--     create a path in the form <cp>jar1</cp><cp>jar2</cp>   -->
                <pathconvert property="l4j.1" pathsep="&lt;/cp&gt;&lt;cp&gt;" refid="jars">
                    <map from="${libs}/" to=""/>
                </pathconvert>
                <property name="l4j.3" value="&lt;cp&gt;${l4j.1}&lt;/cp&gt;" />

                <copy file="${dependencies.basedir}/build-resources/launch4j-config.xml" todir="${deploy}/windows" />

                <replace  file="${deploy}/windows/launch4j-config.xml" token="[jarList]" value="${l4j.3}" />
                <replace  file="${deploy}/windows/launch4j-config.xml" token="[mainjar]" value="resources/java/${groupId}-${ant.project.name}-${version}.jar" />
                <replace  file="${deploy}/windows/launch4j-config.xml" token="[output]" value="${deploy}/windows/${app.name}/${ant.project.name}.exe" />
                <replace  file="${deploy}/windows/launch4j-config.xml" token="[mainClass]" value="${app.main}" />

                <condition property="l4j.java.min" value="1.6.0" else="">
                    <equals arg1="${elph.java.version}" arg2="6"/>
                </condition>
                <replace  file="${deploy}/windows/launch4j-config.xml" token="[java.version.min]" value="${l4j.java.min}" />

                <if>
                    <available file="${src}/${app.icon.small.ico}"/>
                    <then>
                        <copy tofile= "${deploy}/windows/${app.name}/resources/java/${app.name}.ico" file="${src}/${app.icon.small.ico}" failonerror="true" overwrite="true"/>
                        <replace  file="${deploy}/windows/launch4j-config.xml" token="[icon]" value="${deploy}/windows/${app.name}/resources/java/${app.name}.ico" />
                    </then>
                    <else>
                        <replace  file="${deploy}/windows/launch4j-config.xml" token="[icon]" value="" />
                    </else>
                </if>

                <launch4j configfile="${deploy}/windows/launch4j-config.xml" />
            </then>
        </if>
    </target>


    <!-- build all local goals -->
    <target name="local.goal" depends="local.xplatform-app, local.dmg, local.debian-pkg, local.exe"/>

    <!-- build everything with all dependent modules -->
    <target name="everything">
        <antcall target="depend.${ant.project.name}"/>
    </target>
</project>