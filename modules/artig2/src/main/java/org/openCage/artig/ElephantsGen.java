package org.openCage.artig;

import org.apache.commons.io.IOUtils;
import org.jetbrains.annotations.NotNull;
import org.openCage.artig.stjx.Artifact;
import org.openCage.artig.stjx.Author;
import org.openCage.artig.stjx.Module;
import org.openCage.artig.stjx.Project;
import org.openCage.io.FileUtils;
import org.openCage.io.fspath.FSPath;
import org.openCage.lang.Strings;
import org.openCage.lang.errors.Unchecked;
import org.openCage.lang.iterators.Count;

import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class ElephantsGen {

    private final Project project;

    public ElephantsGen( @NotNull Artig artig) { //}, FSPath baseDir  ) {
        this.project = artig.getProject();
    }

    public void generate( FSPath projectRoot ) {

        FSPath rootPom = projectRoot.add( "dependencies.xml" );
        FileUtils.ensurePath( rootPom );

        FileWriter writer = null;
        try {
            writer = new FileWriter( rootPom.toFile() );

            writer.write( deps());

        } catch (IOException e) {
            throw Unchecked.wrap( e );
        } finally {
            IOUtils.closeQuietly( writer );
        }

        for ( Artifact mod : project.getModules() ) {
            FSPath modPom = projectRoot.add( "modules", mod.getModuleName(), "build.xml" );
            FileUtils.ensurePath( modPom );

            try {
                writer = new FileWriter( modPom.toFile() );

                writer.write( buildxml( mod ));

            } catch (IOException e) {
                throw Unchecked.wrap( e );
            } finally {
                IOUtils.closeQuietly( writer );
            }

        }
    }



    public String buildxml( Module mod ) {

        Artifact arti = mod.getArtifact();

        String ret = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n" +
                "<project name=\"" + arti.getModuleName() + "\" default=\"default\" basedir=\".\">\n\n" +
                "   <!-- generated by artig -->\n\n";



        ret += antProperty( "el.version", arti.getVersion() + "\n";
//        ret += antProperty( "el.buildnumber", "" + arti.getVersion().getBuildNumber()) + "\n";
        ret += antProperty( "el.groupId", arti.getGroupId()) + "\n";
        ret += antProperty( "el.src.java", "src/main/java") + "\n";
        ret += antProperty( "el.src.resources", "src/main/resources") + "\n";

        if ( mod.getApp() != null ) {
            ret += antProperty( "el.isApp", "true") + "\n";
            ret += antProperty( "el.main.class", mod.getApp().getMainClass() ) + "\n";
        }

        ret += antProperty( "el.description.short", "TODO descr") + "\n";
        ret += antProperty( "el.licence", arti.getLicence()) + "\n";
        ret += antProperty( "el.localization", Strings.join( arti.getLanguages()).toString()) + "\n";
        ret += antProperty( "el.webpage", arti.getAddress().getPage()) + "\n";
        ret += antProperty( "el.email", arti.getSupport()) + "\n";
        ret += antProperty( "el.java.version", arti.getJava().getMin()) + "\n";

        List<String> names = new ArrayList<String>();
        for ( Author author : arti.getAuthors() ) {
            names.add( author.getName());
        }
        ret += antProperty( "el.author", Strings.join( names ).toString()) + "\n";
        if ( names.size() > 0 ) {
            String firstAuthor = names.get(0);

            ret += antProperty( "el.author.first", firstAuthor.substring(0, firstAuthor.lastIndexOf(' '))) + "\n";
            ret += antProperty( "el.author.last", firstAuthor.substring( firstAuthor.lastIndexOf(' ') + 1)) + "\n";
        }

        if ( mod.getApp() != null ) {
            //if ( mod.getApp().getDownload().getScreenshot().isSet() ) {
                ret += antProperty( "el.url.screenshot", mod.getApp().getDownload().getScreenshot() ) + "\n";
            //}
            //if ( arti.getIconUrl().isSet() ) {
                ret += antProperty( "el.url.icon", mod.getApp().getDownload().getIcon() ) + "\n";
            //}
            //if ( arti.getDownloadUrl().isSet() ) {
                ret += antProperty( "el.url.download", mod.getApp().getDownload().getDownload() ) + "\n";
            //}
        }


        ret += "\n   <import file=\"../../build-resources/build-common.xml\"/>\n" +
                "</project>";
        return ret;
    }

    private String antProperty( String key, String val ) {
        return "   <property name = \"" + key + "\"       value=\"" + val + "\" />";
    }

    public String deps() {
        String ret =
                "<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n" +
                "<project name=\"dependencies\">\n\n" +
                        "  <!-- ===== generated by openCage-artigen ======== -->\n\n" +
                "   <dirname property=\"dependencies.basedir\" file=\"${ant.file.dependencies}\"/>\n\n";


        for ( Artifact arti : project.getAll() ) {
            Artifact ch = arti; //.getChoice();
            if ( project.isModule( ch )) {
                ret += writeModule(ch);
            }
        }


        ret += "\n" +
                "   <!-- ================================================================== -->\n" +
                "   <!--     external library dependencies                                  --> \n" +
                "   <!-- ================================================================== -->    \n" +
                "\n";

        for ( Artifact arti : project.getAll() ) {
            Artifact ch = arti; //.getChoice();
            if ( !project.isModule( ch )) {
                ret += writeExternal(ch);
            }
        }

        ret += "\n\n</project>\n";



        return ret;
    }

    //    <!-- ================================================================== -->
    //    <target name= "launch4j"
    //            depends="xstream">
    //        <copy todir="${dependencies.basedir}/build/libs" file="${dependencies.basedir}/external/production/launch4j.jar"/>
    //    </target>
    private String writeExternal(Artifact arti) {
        String ret = "   <!-- ================================================================== -->\n";
        ret += "   <target name=\""+ arti.gettName() +"\"";

        if ( arti.getCompileDependencies().size() > 0 ) {
            ret += "\n           depends=\"";

            for ( Count<Artifact> dep : Count.count(arti.getCompileDependencies()) ) {
                ret += dep.obj().getChoice().gettName();
                if ( !dep.isLast()) {
                    ret += ", ";
                }
            }
            ret += "\"";
        }

        ret += ">\n";

        ret += "      <copy todir=\"${dependencies.basedir}/build/libs\" file=\"${dependencies.basedir}/repo/"+ getLibraryLocation( arti )+"\" />\n";

        ret += "   </target>\n\n";
        return ret;
    }

    private String getLibraryLocation(Artifact arti) {
        return arti.getGroupId().replace('.', '/')  + "/" + arti.gettName() + "/" + arti.getVersion().getShort() + "/" + arti.gettName() + "-" + arti.getVersion().getShort() + ".jar" ;
    }

    //    <!-- ================================================================== -->
    //    <target name= "depend.ui"
    //            depends="depend.localization, depend.application, depend.io, designgridlayout, depend.lang, guice, javagraphics-preferencepanel, RSyntaxTextArea, jgoodies-binding">
    //        <ant dir="${dependencies.basedir}/modules/ui" target="local.goal" inheritAll="false"/>
    //    </target>
    private String writeModule(Artifact arti) {
        String ret = "   <!-- ================================================================== -->\n";
        ret += "   <target name=\""+ getModuleName(arti ) +"\"";

        if ( arti.getCompileDependencies().size() > 0 ) {
            ret += "\n           depends=\"";

            for ( Count<Artifact> dep : Count.count(arti.getCompileDependencies()) ) {
                ret += getModuleName( dep.obj().getChoice() );
                if ( !dep.isLast()) {
                    ret += ", ";
                }
            }
            ret += "\"";
        }
        ret += ">\n";
        ret += "      <ant dir=\"${dependencies.basedir}/modules/" + arti.getModuleName() + "\""
            +      " target=\"local.goal\" inheritAll=\"false\"/>\n";

        ret += "   </target>\n\n";
        return ret;
    }

    private String getModuleName( Artifact arti ) {

        if ( project.isModule( arti )) {
            return "depend." + arti.getModuleName();
        }

        return arti.gettName();
    }
}
